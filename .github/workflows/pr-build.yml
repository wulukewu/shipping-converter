name: pr-build-docker-image

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GHCR_REGISTRY: ghcr.io
  DOCKERHUB_REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE_NAME: wulukewu/shipping-converter

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}

      - name: Build and push Docker image to both registries
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}
          labels: ${{ steps.meta.outputs.labels }}

  comment-pr:
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            const ghcrImage = `${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}`;
            const dockerhubImage = `${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}`;
            const comment_identifier = "<!-- docker-image-comment -->";
            const comment = `
              ðŸš€ Docker images built successfully! 

              - GHCR: \`${ghcrImage}\` 
              - Docker Hub: \`${dockerhubImage}\` 

              ${comment_identifier}
            `;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const old_comments = comments.filter(c => c.body.includes(comment_identifier));
            for (const old_comment of old_comments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: old_comment.id,
              });
            }
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
